tuple EventNumber {
  uint32 eventNumber;
};

tuple EventIndex {
  uint32 runNumber;
  uint32 fileNumber;
  uint32 eventNumber;
};

tuple RawPmtSegment {
  uint64 startTime;
  uint32 channelNumber;
  [uint16] adcValue;
};

tuple RawSegment {
  uint64 startTime;
  uint32 channelNumber;
  [uint16] adcValue;
  uint64 busyTime;
  uint32 sampleSize;
  float baseLine;
};

tuple CalibSegment {
  uint64 startTime;
  uint32 channelNumber;
  [float] peValue;
  uint64 busyTime;
  uint32 sampleSize;
};

struct RawData {
  uint32 packageId = 1;
  uint32 packageNumber = 2;
  uint64 packageTime = 3;
  uint64 packageEndTime = 4;
  [RawPmtSegment] rawSegments = 5;
};

struct GroupData {
  uint32 runNumber = 1;
  uint32 groupNumber = 2;
  uint64 startTime = 3;
  uint64 endTime = 4;
  [RawPmtSegment] segments = 5;
  [RawSegment] nsegments = 6;
};

struct CalibData {
  uint32 runNumber = 1;
  uint32 groupNumber = 2;
  uint64 startTime = 3;
  uint64 endTime = 4;
  [CalibSegment] segments = 5;
};

enum HitType : uint8 {
  NORMAL=1, NOISE, SATURATE, BASELINE
};

struct SingleHit {
  uint32 channelNumber = 1;
  uint64 startTime = 2;
  uint64 peakTime = 3;
  uint64 width = 4;
  float area = 5;
  float height = 6;
  float preBaseline = 7;
  float postBaseline = 8;
  float rmsPreBaseline = 9;
  float rmsPostBaseline = 10;
  float hitSearchThreshold = 11;
  HitType type = 12;
  CalibSegment segment = 13;
};

struct HitData {
  uint32 runNumber = 1;
  uint32 groupNumber = 2;
  [SingleHit] hitsVec = 3;
};

enum SignalType : uint8 {
  S1=1, S2, NOISE, UNKNOWN, SPARKING, PMT_SPARKING, VETO
};

struct Signal {
  uint64 startTime = 1;
  uint64 endTime = 2;
  uint64 width = 3;
  float height = 4;
  SignalType type = 5;
  [SingleHit] hits = 6;
  (uint32 => CalibSegment) waveform = 7;
  (std::string => float) fPars = 8;
  (std::string => int) iPars = 9;
};

struct SignalData {
  uint32 runNumber = 1;
  uint32 groupNumber = 2;
  [Signal] signals = 3;
};

enum PhysicalEventType : uint8 {
  UNKNOWN=1, SS, MS, BI_PO_214, BI_PO_212, KR_85, OTHER, S1_ONLY, S2_ONLY, PHYSICAL, NON_PHYSICAL, LONG_SPLIT, LAST_EVENT
};

struct PhysicalEventData {
  uint32 runNumber = 1;
  EventNumber number = 2;
  PhysicalEventType type = 3;
  [Signal] signals = 4;
}
